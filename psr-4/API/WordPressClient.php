<?php
/**
 * This file is part of the Comment IQ API client library.
 *
 * (c) Carl Alexander <contact@carlalexander.ca>
 *
 * @package PostmaticCommentIQAPI
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Postmatic\CommentIQ\API;

use WP_Http;
use WP_Error;

/**
 * The comment IQ API Client.
 *
 * @author Carl Alexander <contact@carlalexander.ca>
 * @author Dylan Kuhn <dylan@gopostmatic.com>
 */
class WordPressClient implements Client {

	/**
	 * Base URL for all Comment IQ API endpoints.
	 *
	 * @var string
	 */
	protected $endpoint_base;

	/**
	 * The WordPress HTTP transport.
	 *
	 * @var WP_Http
	 */
	protected $http_transport;

	/**
	 * Constructor.
	 *
	 * @param WP_Http $http_transport Transport to use for HTTP requests.
	 * @param string  $endpoint_base Optional. Default is 'http://api.comment-iq.com/commentIQ/v1'.
	 */
	public function __construct( WP_Http $http_transport, $endpoint_base = '' ) {
		$this->http_transport = $http_transport;
		$this->endpoint_base = $endpoint_base ?: 'http://api.comment-iq.com/commentIQ/v1';
	}

	/**
	 * Add a new article for Comment IQ to track. Returns the auto-generated ID
	 * of the article.
	 *
	 * @param string $article_text Article text.
	 *
	 * @return int|WP_Error
	 */
	public function add_article( $article_text ) {
		$response = $this->post($this->endpoint_base . '/addArticle', array(
			'article_text' => $article_text,
		));

		if ( $response instanceof WP_Error ) {
			return $response;
		} elseif ( empty( $response['articleID'] ) ) {
			return new WP_Error( 'commentiq_error', sprintf( "Comment IQ API didn't return an article ID. [Message: %s]", $response['status'] ) );
		} elseif ( ! is_numeric( $response['articleID'] ) ) {
			return new WP_Error( 'commentiq_error', "Comment IQ API didn't return a valid article ID." );
		}

		return $response['articleID'];
	}

	/**
	 * Add a new comment to the article with the given article ID. Returns the comment details
	 * generated by the Comment IQ API.
	 *
	 * @param int    $article_id The ID of the post the comment is on.
	 * @param string $comment_body The comment body.
	 * @param string $comment_date Optional. The comment date.
	 * @param string $username     Optional. The commenter name.
	 *
	 * @return array|WP_Error
	 */
	public function add_comment( $article_id, $comment_body, $comment_date = '', $username = '' ) {
		$parameters = array(
			'articleID' => $article_id,
			'commentBody' => $comment_body,
		);

		if ( empty( $comment_date ) ) {
			$parameters['commentDate'] = $comment_date;
		}

		if ( ! empty( $username ) ) {
			$parameters['username'] = $username;
		}

		$response = $this->post( $this->endpoint_base . '/addComment', $parameters );

		if ( $response instanceof WP_Error ) {
			return $response;
		} elseif ( empty( $response['commentID'] ) ) {
			return new WP_Error( 'commentiq_error', sprintf( "Comment IQ API didn't return an CommentID. [Message: %s]", $response['status'] ) );
		} elseif ( ! is_numeric( $response['commentID'] ) ) {
			return new WP_Error( 'commentiq_error', "Comment IQ API didn't return a valid CommentID" );
		}

		unset( $response['status'] );

		return $response;
	}

	/**
	 * Update an existing article with Comment IQ API.
	 *
	 * @param int    $article_id The ID of the post the comment is on.
	 * @param string $article_text The text of the post.
	 */
	public function update_article( $article_id, $article_text ) {
		$this->post($this->endpoint_base . '/updateArticle', array(
			'articleID' => $article_id,
			'article_text' => $article_text,
		));
	}

	/**
	 * Update an existing comment with Comment IQ API. Returns the comment details
	 * generated by the Comment IQ API.
	 *
	 * @param int    $comment_id   The ID of the comment.
	 * @param string $comment_body The comment body.
	 * @param string $comment_date Optional. The comment date.
	 * @param string $username     Optional. The commenter name.
	 *
	 * @return array|WP_Error
	 */
	public function update_comment( $comment_id, $comment_body, $comment_date = '', $username = '' ) {
		$parameters = array(
			'commentID' => $comment_id,
			'commentBody' => $comment_body,
		);

		if ( empty( $comment_date ) ) {
			$parameters['commentDate'] = $comment_date;
		}

		if ( ! empty( $username ) ) {
			$parameters['username'] = $username;
		}

		$response = $this->post( $this->endpoint_base . '/updateComment', $parameters );

		unset( $response['status'] );

		return $response;
	}

	/**
	 * Build an URL with given url and query parameters.
	 *
	 * @param string $url   The base URL.
	 * @param array  $query An array of query parameters to add.
	 *
	 * @return string
	 */
	private function build_url( $url, array $query = array() ) {
		return $url . '?' . http_build_query( $query );
	}

	/**
	 * Decodes the API response.
	 *
	 * @param mixed $response The HTTP response.
	 *
	 * @return array|WP_Error
	 */
	private function decode_response( $response ) {
		$response = $this->validate_response( $response );

		if ( $response instanceof WP_Error ) {
			return $response;
		}

		return $this->validate_body( json_decode( $response['body'], true ) );
	}

	/**
	 * Performs a GET request using the WordPress HTTP transport.
	 *
	 * @param string $url   The URL.
	 * @param array  $query An array representing the query.
	 * @param array  $args  An array of request arguments.
	 *
	 * @return array|WP_Error
	 */
	private function get( $url, array $query = array(), array $args = array() ) {
		$args = array_merge_recursive( $args, $this->get_default_args() );

		return $this->decode_response( $this->http_transport->get( $this->build_url( $url, $query ), $args ) );
	}

	/**
	 * Get the default arguments for all client requests.
	 *
	 * @return array
	 */
	private function get_default_args() {
		$args = array(
			'headers' => array(
				'Content-Type' => 'application/json',
			),
		);

		return $args;
	}

	/**
	 * Extracts the status code from the given response.
	 *
	 * @param array $response The response array with a response code.
	 *
	 * @return int|null
	 */
	private function get_response_status_code( array $response ) {
		if ( ! isset( $response['response'] ) || ! is_array( $response['response'] ) || ! isset( $response['response']['code'] ) ) {
			return;
		}

		return (int) $response['response']['code'];
	}

	/**
	 * Checks if the given response is considered successful as per the HTTP specification.
	 * This means that the response has a 2xx status code.
	 *
	 * @param array $response The response being validated.
	 *
	 * @return bool
	 */
	private function is_successful( array $response ) {
		$status_code = $this->get_response_status_code( $response );

		if ( null === $status_code ) {
			return false;
		}

		return $status_code >= 200 && $status_code < 300;
	}

	/**
	 * Performs a POST request to Comment IQ API using the WordPress HTTP transport.
	 *
	 * @param string $url        The request URL.
	 * @param array  $parameters The request parameters to be JSON-encoded.
	 * @param array  $args       Optional. Request arguments.
	 *
	 * @return array|WP_Error
	 */
	private function post( $url, $parameters, array $args = array() ) {
		$args = array_merge_recursive( $args, $this->get_default_args() );
		$args['body'] = wp_json_encode( $parameters );

		return $this->decode_response( $this->http_transport->post( $url, $args ) );
	}

	/**
	 * Validates the client response body. Returns a WP_Error if an error is found.
	 *
	 * @param mixed $body The response body.
	 *
	 * @return array|WP_Error
	 */
	private function validate_body( $body ) {
		if ( ! is_array( $body ) ) {
			return new WP_Error( 'invalid_json', 'There was an error decoding the response.' );
		}

		return $body;
	}

	/**
	 * Validates the client response. Returns a WP_Error if an error is found.
	 *
	 * @param mixed $response The client response.
	 *
	 * @return array|WP_Error
	 */
	private function validate_response( $response ) {
		if ( $response instanceof WP_Error ) {
			return $response;
		} elseif ( ! is_array( $response ) ) {
			return new WP_Error( 'invalid_response', 'Response must be an array.' );
		} elseif ( empty( $response['body'] ) ) {
			return new WP_Error( 'invalid_response', 'No body found in the response.' );
		}

		return $response;
	}
}
